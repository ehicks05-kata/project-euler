package net.ehicks.euler;

import java.util.ArrayList;
import java.util.List;

/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
 */
public class Problem045
{
    private static int size = 500_000;
    private static List<Long> triangles  = getSpecialNumbers("tri", size);
    private static List<Long> pentas     = getSpecialNumbers("pent", size);
    private static List<Long> hexas      = getSpecialNumbers("hex", size);

    public static void main(String[] args)
    {
        long startTime = System.currentTimeMillis();

        long result = 0;
        for (long triangle : triangles)
        {
            if (isPentagon(triangle) && isHexagon(triangle))
            {
                System.out.println("Number: " + triangle + ", Tn: " + getSpecialNumberPosition("tri", triangle) + ", Pn: " +
                        getSpecialNumberPosition("pent", triangle) + ", Hn: " + getSpecialNumberPosition("hex", triangle));

                if (triangle == 1 || triangle == 40755) continue;
                result = triangle;
                break;
            }
        }

        System.out.println("The next triangle number that is also pentagonal and hexagonal: " + result);
        System.out.println("Process took " + (System.currentTimeMillis() - startTime) + " ms.");
    }

    private static boolean isTriangle(long number)
    {
        return triangles.contains(number);
    }

    private static boolean isPentagon(long number)
    {
        return pentas.contains(number);
    }

    private static boolean isHexagon(long number)
    {
        return hexas.contains(number);
    }

    public static int getSpecialNumberPosition(String type, long number)
    {
        if (type.equals("tri"))  return triangles.indexOf(number) + 1;
        if (type.equals("pent")) return pentas.indexOf(number) + 1;
        if (type.equals("hex"))  return hexas.indexOf(number) + 1;

        return 0;
    }

    public static List<Long> getSpecialNumbers(String type, int size)
    {
        List<Long> specialNumbers = new ArrayList<>();
        for (long i = 1; i < size; i++)
        {
            long number = 0;
            if (type.equals("tri"))  number = (i * (i + 1L)) / 2L;
            if (type.equals("pent")) number = (i * (3L * i - 1L)) / 2L;
            if (type.equals("hex"))  number = i * (2L * i - 1L);
            specialNumbers.add(number);
        }

        return specialNumbers;
    }
}
